set
__________________________________________________________________________
In , a set is an unordered collection of unique elements. Sets are mutable, and  provides several predefined methods to work with sets effectively.


Hereâ€™s a comprehensive list of commonly used set methods:

1. Adding Elements
set.add(element)
Adds a single element to the set.



s = {1, 2}
s.add(3)
print(s)  # Output: {1, 2, 3}
set.update(iterable)
Adds multiple elements (from an iterable) to the set.



s = {1, 2}
s.update([3, 4])
print(s)  # Output: {1, 2, 3, 4}
2. Removing Elements
set.remove(element)
Removes a specific element. Raises a KeyError if the element is not found.



s = {1, 2, 3}
s.remove(2)
print(s)  # Output: {1, 3}
set.discard(element)
Removes a specific element, but does not raise an error if the element is not found.



s = {1, 2, 3}
s.discard(4)  # No error
print(s)  # Output: {1, 2, 3}
set.pop()
Removes and returns an arbitrary element from the set. Raises a KeyError if the set is empty.



s = {1, 2, 3}
print(s.pop())  # Output: (e.g., 1)
print(s)        # Remaining elements
set.clear()
Removes all elements from the set.



s = {1, 2, 3}
s.clear()
print(s)  # Output: set()
3. Set Operations
set.union(*others) or |
Returns a new set with elements from the set and all others.



a = {1, 2}
b = {2, 3}
print(a.union(b))  # Output: {1, 2, 3}
print(a | b)       # Output: {1, 2, 3}
set.intersection(*others) or &
Returns a new set with elements common to the set and all others.



a = {1, 2, 3}
b = {2, 3, 4}
print(a.intersection(b))  # Output: {2, 3}
print(a & b)              # Output: {2, 3}
set.difference(*others) or -
Returns a new set with elements in the set but not in others.



a = {1, 2, 3}
b = {2, 3, 4}
print(a.difference(b))  # Output: {1}
print(a - b)            # Output: {1}
set.symmetric_difference(other) or ^
Returns a new set with elements in either the set or the other, but not both.



a = {1, 2, 3}
b = {2, 3, 4}
print(a.symmetric_difference(b))  # Output: {1, 4}
print(a ^ b)                      # Output: {1, 4}
4. Membership Testing
element in set
Checks if an element is in the set.



s = {1, 2, 3}
print(2 in s)  # Output: True
element not in set
Checks if an element is not in the set.



print(4 not in s)  # Output: True
5. Subset and Superset
set.issubset(other) or <=
Checks if the set is a subset of another.



a = {1, 2}
b = {1, 2, 3}
print(a.issubset(b))  # Output: True
print(a <= b)         # Output: True
set.issuperset(other) or >=
Checks if the set is a superset of another.



print(b.issuperset(a))  # Output: True
print(b >= a)           # Output: True
6. Disjoint Sets
set.isdisjoint(other)
Returns True if the set has no elements in common with another.


a = {1, 2}
b = {3, 4}
print(a.isdisjoint(b))  # Output: True
7. Copying
set.copy()
Returns a shallow copy of the set.


s = {1, 2, 3}
s_copy = s.copy()
print(s_copy)  # Output: {1, 2, 3}
8. Frozen Set
A frozen set is an immutable version of a set. It supports all set operations but cannot be modified after creation.

frozenset(iterable)


fs = frozenset([1, 2, 3])
print(fs)  # Output: frozenset({1, 2, 3})
These methods make sets powerful for tasks involving uniqueness, membership testing, and mathematical set operations.




